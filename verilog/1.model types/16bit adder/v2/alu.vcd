$date
	Fri Apr 28 13:16:39 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alutest $end
$var wire 1 ! ZR $end
$var wire 16 " Z [15:0] $end
$var wire 1 # V $end
$var wire 1 $ S $end
$var wire 1 % P $end
$var wire 1 & CY $end
$var reg 16 ' X [15:0] $end
$var reg 16 ( Y [15:0] $end
$scope module DUT $end
$var wire 1 # Overflow $end
$var wire 16 ) X [15:0] $end
$var wire 16 * Y [15:0] $end
$var wire 3 + c [3:1] $end
$var wire 1 ! Zero $end
$var wire 16 , Z [15:0] $end
$var wire 1 $ Sign $end
$var wire 1 % Parity $end
$var wire 1 & Carry $end
$scope module A0 $end
$var wire 4 - A [3:0] $end
$var wire 4 . B [3:0] $end
$var wire 1 / cin $end
$var wire 1 0 cout $end
$var wire 4 1 S [3:0] $end
$upscope $end
$scope module A1 $end
$var wire 4 2 A [3:0] $end
$var wire 4 3 B [3:0] $end
$var wire 1 4 cin $end
$var wire 1 5 cout $end
$var wire 4 6 S [3:0] $end
$upscope $end
$scope module A2 $end
$var wire 4 7 A [3:0] $end
$var wire 4 8 B [3:0] $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 4 ; S [3:0] $end
$upscope $end
$scope module A3 $end
$var wire 4 < A [3:0] $end
$var wire 4 = B [3:0] $end
$var wire 1 > cin $end
$var wire 1 & cout $end
$var wire 4 ? S [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?
x>
bx =
bx <
bx ;
x:
x9
bx 8
bx 7
bx 6
x5
x4
bx 3
bx 2
bx 1
x0
0/
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
x%
x$
x#
bx "
x!
$end
#5
1#
0$
1%
b0 ?
1&
0>
b1111 ;
0:
09
b1111 6
05
04
0!
b111111111111 "
b111111111111 ,
b1111 1
b0 +
00
b0 .
b0 3
b0 8
b1000 =
b1111 -
b1111 2
b1111 7
b1000 <
b1000000000000000 (
b1000000000000000 *
b1000111111111111 '
b1000111111111111 )
#10
1!
1>
b0 ;
1:
19
0#
b0 6
15
14
0$
b111 +
10
1&
b0 1
b0 "
b0 ,
b0 ?
b10 .
b0 =
b1110 -
b1111 <
b10 (
b10 *
b1111111111111110 '
b1111111111111110 )
#15
1$
b1111 ?
0&
0>
b1111 ;
0:
09
b1111 6
05
04
0!
b1111111111111111 "
b1111111111111111 ,
b1111 1
b0 +
00
b101 .
b101 3
b101 8
b101 =
b1010 -
b1010 2
b1010 7
b1010 <
b101010101010101 (
b101010101010101 *
b1010101010101010 '
b1010101010101010 )
#20
14
19
1>
b1110 1
10
b1111 6
15
b1111 ;
b111 +
1:
0%
b1111111111111110 "
b1111111111111110 ,
b1111 ?
1&
b1111 .
b1111 3
b1111 8
b1111 =
b1111 -
b1111 2
b1111 7
b1111 <
b1111111111111111 (
b1111111111111111 *
b1111111111111111 '
b1111111111111111 )
#25
